#include "EnemyGenerator.hpp"

/*****************************************************************************************************************
 *										Constructor													     		 *
 *****************************************************************************************************************
 * Input: RenderWindow, ResourceHolder																			 *
 * Output: None																									 *
 * Description: Initializes the spawnFrequency, levelFrequency, level and if the boss has been spawned           *
 ****************************************************************************************************************/
EnemyGenerator::EnemyGenerator(sf::RenderWindow& window, ResourceHolder& resourceHolder) : window(window), resourceHolder(resourceHolder)
{
	spawnFrequency = SPAWN_FREQUENCY;
	levelFrequency = LEVEL_FREQUENCY;
	level = Ship::Level::EasyA;
	bossASpawned = false;
}

/*****************************************************************************************************************
 *										generateGameEnemies											     		 *
 *****************************************************************************************************************
 * Input: SceneNode																								 *
 * Output: None																									 *
 * Description: generate enemies in the game based on the current level. Enemies are generated by attaching      *
 * to the sceneNode that is passed as an argument.																 *
 ****************************************************************************************************************/
void EnemyGenerator::generateGameEnemies(SceneNode& node)
{
	updateLevel();

	if (level == Ship::EasyA && readyToSpawn())
	{
		bossASpawned = false;
		std::unique_ptr<SceneNode> newEnemy(new Enemy(window, resourceHolder, generateRandomLocation(), Ship::Level::EasyA, sf::Vector2f(0, 30)));
		node.attachChild(newEnemy);

	}
	else if (level == Ship::MediumA && readyToSpawn())
	{
		std::unique_ptr<SceneNode> newEnemy(new Enemy(window, resourceHolder, generateRandomLocation(), Ship::Level::MediumA, sf::Vector2f(0, 60)));
		node.attachChild(newEnemy);
	}
	else if (level == Ship::HardA && readyToSpawn())
	{
		std::unique_ptr<SceneNode> newEnemy(new Enemy(window, resourceHolder, generateRandomLocation(), Ship::Level::HardA, sf::Vector2f(0, 40)));
		node.attachChild(newEnemy);
	}
	else if (level == Ship::BossA && !bossASpawned)
	{
		bossASpawned = true;
		std::unique_ptr<SceneNode> newEnemy(new Boss(window, resourceHolder, sf::Vector2f(window.getSize().x / 4, (window.getSize().y / 2) * -1.0),
		Ship::Level::BossA, sf::Vector2f(140, 40)));
		node.attachChild(newEnemy);
	}
}

/*****************************************************************************************************************
 *										updateLevel()												     		 *
 *****************************************************************************************************************
 * Input: None																									 *
 * Output: None																									 *
 * Description: updates the Level after the levelFrequency timer has been reached								 *
 ****************************************************************************************************************/
void EnemyGenerator::updateLevel()
{
	levelTimer = levelClock.getElapsedTime();

	if (levelTimer.asSeconds() > levelFrequency)
	{
		level = levelIncrease();
		levelTimer = levelClock.restart();
	}
}

/*****************************************************************************************************************
 *										generateRandomLocation()									     		 *
 *****************************************************************************************************************
 * Input: None																									 *
 * Output: sf::Vector2f																							 *
 * Description: generates a random location for the entity to spawn. This function uses the window size to       *
 * ensure that the location does not reach outside the windows boundaries, therefore is always rendered within   *
 * the window bounds																							 *
 ****************************************************************************************************************/
sf::Vector2f EnemyGenerator::generateRandomLocation()
{
	sf::Vector2f position;
	position.x = rand() % (window.getSize().x - 32);
	position.y = -32;

	return position;
}

/*****************************************************************************************************************
 *										readyToSpawn()															 *
 *****************************************************************************************************************
 * Input: None																									 *
 * Output: bool indicating if the spawnTimer has reached the spawnFrequency										 *																									 *
 * Description: returns true if the timer has reached the time of the spawnFrequency. If so, the function		 *
 * returns true and the clock is reset																			 *
 ****************************************************************************************************************/
bool EnemyGenerator::readyToSpawn()
{
	spawnTimer = spawnClock.getElapsedTime();
	if (spawnTimer.asSeconds() > spawnFrequency)
	{
		spawnClock.restart();
		return true;
	}
	return false;
}

/*****************************************************************************************************************
 *										levelIncrease()												     		 *
 *****************************************************************************************************************
 * Input: None																									 *
 * Output: None																									 *
 * Description: Increases the level of the object. The levels can only be EasyA, MediumA, HardA, or BossA		 *
 ****************************************************************************************************************/
Ship::Level EnemyGenerator::levelIncrease()
{
	if (level == Ship::EasyA && !gameLevel.bossDefeated())
	{
		return Ship::MediumA;
	}
	else if (level == Ship::MediumA)
	{
		return Ship::HardA;
	}
	else if (level == Ship::HardA)
	{
		return Ship::BossA;
	}
	else if (level == Ship::BossA)
	{
		if (gameLevel.bossDefeated())
		{
			gameLevel.changeBossStatus();
			gameLevel.increaseLevel();
			return Ship::EasyA;
		}
		else
		{
			return Ship::BossA;
		}

	}
}
